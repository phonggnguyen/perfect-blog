import { createHead, renderHeadToString } from "@vueuse/head";
import { onBeforeUnmount, getCurrentInstance } from "vue";
import { defineNuxtPlugin, useRouter } from "#app";
import { appHead } from "#build/nuxt.config.mjs";
export default defineNuxtPlugin((nuxtApp) => {
  const head = createHead();
  head.addEntry(appHead, { resolved: true });
  nuxtApp.vueApp.use(head);
  if (process.client) {
    let pauseDOMUpdates = true;
    head.hooks["before:dom"].push(() => !pauseDOMUpdates);
    nuxtApp.hooks.hookOnce("app:mounted", () => {
      pauseDOMUpdates = false;
      head.updateDOM();
      useRouter().beforeEach(() => {
        pauseDOMUpdates = true;
      });
      useRouter().afterEach(() => {
        if (pauseDOMUpdates) {
          pauseDOMUpdates = false;
          head.updateDOM();
        }
      });
    });
  }
  nuxtApp._useHead = (_meta, options) => {
    if (process.server) {
      head.addEntry(_meta, options);
      return;
    }
    const cleanUp = head.addReactiveEntry(_meta, options);
    const vm = getCurrentInstance();
    if (!vm) {
      return;
    }
    onBeforeUnmount(() => {
      cleanUp();
      head.updateDOM();
    });
  };
  if (process.server) {
    nuxtApp.ssrContext.renderMeta = async () => {
      const meta = await renderHeadToString(head);
      return {
        ...meta,
        bodyScripts: meta.bodyTags
      };
    };
  }
});
