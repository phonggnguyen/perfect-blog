{
  "version": 3,
  "sources": ["../../tabbable/src/index.js", "../../focus-trap/index.js"],
  "sourcesContent": ["const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]:not(slot)',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n  'details>summary:first-of-type',\n  'details',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element.getRootNode()\n    : (element) => element.ownerDocument;\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      const validShadowRoot =\n        !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        node.isContentEditable) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  let nodeRootHost = getRootNode(node).host;\n  let attached = !!(\n    nodeRootHost?.ownerDocument.contains(nodeRootHost) ||\n    node.ownerDocument.contains(node)\n  );\n\n  while (!attached && nodeRootHost) {\n    // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n    //  which means we need to get the host's host and check if that parent host is contained\n    //  in (i.e. attached to) the document\n    nodeRootHost = getRootNode(nodeRootHost).host;\n    attached = !!nodeRootHost?.ownerDocument.contains(nodeRootHost);\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n", "import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus:\n          config.returnFocusOnDeactivate &&\n          !isFocusable(target, config.tabbableOptions),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],
  "mappings": "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",
  "names": ["candidateSelectors", "candidateSelector", "join", "NoElement", "Element", "matches", "prototype", "msMatchesSelector", "webkitMatchesSelector", "getRootNode", "element", "ownerDocument", "getCandidates", "el", "includeContainer", "filter", "candidates", "Array", "slice", "apply", "querySelectorAll", "call", "unshift", "getCandidatesIteratively", "elements", "options", "elementsToCheck", "from", "length", "shift", "tagName", "assigned", "assignedElements", "content", "children", "nestedCandidates", "flatten", "push", "scopeParent", "validCandidate", "includes", "shadowRoot", "getShadowRoot", "validShadowRoot", "shadowRootFilter", "getTabindex", "node", "isScope", "tabIndex", "test", "isContentEditable", "isNaN", "parseInt", "getAttribute", "sortOrderedTabbables", "a", "b", "documentOrder", "isInput", "isHiddenInput", "type", "isDetailsWithSummary", "r", "some", "child", "getCheckedRadio", "nodes", "form", "i", "checked", "isTabbableRadio", "name", "radioScope", "queryRadios", "radioSet", "window", "CSS", "escape", "err", "console", "error", "message", "isRadio", "isNonTabbableRadio", "isNodeAttached", "nodeRootHost", "host", "attached", "contains", "isZeroArea", "getBoundingClientRect", "width", "height", "isHidden", "displayCheck", "getComputedStyle", "visibility", "isDirectSummary", "nodeUnderDetails", "parentElement", "originalNode", "rootNode", "assignedSlot", "getClientRects", "isDisabledFromFieldset", "parentNode", "disabled", "item", "isNodeMatchingSelectorFocusable", "isNodeMatchingSelectorTabbable", "isValidShadowRootTabbable", "shadowHostNode", "sortByOrder", "regularTabbables", "orderedTabbables", "forEach", "candidateTabindex", "sort", "reduce", "acc", "sortable", "concat", "tabbable", "bind", "focusable", "isTabbable", "Error", "focusableCandidateSelector", "isFocusable", "activeFocusTraps", "trapQueue", "activateTrap", "trap", "length", "activeTrap", "pause", "trapIndex", "indexOf", "push", "splice", "deactivateTrap", "unpause", "isSelectableInput", "node", "tagName", "toLowerCase", "select", "isEscapeEvent", "e", "key", "keyCode", "isTabEvent", "delay", "fn", "setTimeout", "findIndex", "arr", "idx", "every", "value", "i", "valueOrHandler", "params", "getActualTarget", "event", "target", "shadowRoot", "composedPath", "createFocusTrap", "elements", "userOptions", "doc", "document", "config", "_objectSpread", "returnFocusOnDeactivate", "escapeDeactivates", "delayInitialFocus", "state", "containers", "containerGroups", "tabbableGroups", "nodeFocusedBeforeActivation", "mostRecentlyFocusedNode", "active", "paused", "delayInitialFocusTimer", "undefined", "getOption", "configOverrideOptions", "optionName", "configOptionName", "findContainerIndex", "element", "container", "tabbableNodes", "contains", "find", "getNodeForOption", "optionValue", "Error", "querySelector", "getInitialFocusNode", "activeElement", "firstTabbableGroup", "firstTabbableNode", "updateTabbableNodes", "map", "tabbable", "tabbableOptions", "focusableNodes", "focusable", "lastTabbableNode", "nextTabbableNode", "forward", "nodeIdx", "n", "slice", "isTabbable", "reverse", "filter", "group", "tryFocus", "focus", "preventScroll", "getReturnFocusNode", "previousActiveElement", "checkPointerDown", "clickOutsideDeactivates", "deactivate", "returnFocus", "isFocusable", "allowOutsideClick", "preventDefault", "checkFocusIn", "targetContained", "Document", "stopImmediatePropagation", "checkTab", "destinationNode", "containerIndex", "containerGroup", "shiftKey", "startOfGroupIndex", "destinationGroupIndex", "destinationGroup", "lastOfGroupIndex", "checkKey", "checkClick", "addListeners", "addEventListener", "capture", "passive", "removeListeners", "removeEventListener", "activate", "activateOptions", "onActivate", "onPostActivate", "checkCanFocusTrap", "finishActivation", "concat", "then", "deactivateOptions", "options", "onDeactivate", "onPostDeactivate", "checkCanReturnFocus", "clearTimeout", "finishDeactivation", "updateContainerElements", "containerElements", "elementsAsArray", "Boolean"]
}
