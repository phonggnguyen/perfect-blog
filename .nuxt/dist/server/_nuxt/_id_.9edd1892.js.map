{"version":3,"file":"_id_.9edd1892.js","sources":["../../../../pages/edit/[id].vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { stripHtml } from \"string-strip-html\"\nimport slugify from \"slugify\"\nimport { Posts } from \"~~/utils/types\"\n\nconst user = useSupabaseUser()\nconst client = useSupabaseClient()\n\nconst { params } = useRoute()\nconst postId = ref(params.id)\n\nconst title = postId.value ? ref(\"\") : useLocalStorage(\"new-post-title\", \"\")\nconst body = postId.value ? ref(\"\") : useLocalStorage(\"new-post-body\", \"\")\nconst settings = ref({\n  image: \"\",\n  active: false,\n  tags: [],\n})\n\nconst isSaving = ref(false)\nconst isLoginVisible = ref(false)\n\nconst save = async () => {\n  if (!title.value || !stripHtml(body.value).result || isSaving.value) return\n  if (!user.value?.id) {\n    // login modal\n    isLoginVisible.value = true\n    return\n  }\n\n  isSaving.value = true\n  const { data, error } = await client\n    .from<Posts>(\"posts\")\n    .upsert({\n      id: postId.value?.toString(),\n      slug: slugify(title.value, { lower: true }),\n      title: title.value,\n      body: body.value,\n      author_id: user.value.id,\n      active: settings.value.active,\n      cover_img: settings.value.image,\n      tags: settings.value.tags,\n    })\n    .single()\n  console.log({ data })\n  if (data) {\n    if (!postId.value) {\n      postId.value = data.id\n      // history.pushState(null, \"Title?\", `${window.origin}/edit/${postId.value}`)\n\n      localStorage.removeItem(\"new-post-title\")\n      localStorage.removeItem(\"new-post-body\")\n      navigateTo(`/edit/${postId.value}`)\n    }\n  }\n  isSaving.value = false\n}\n\nuseMagicKeys({\n  passive: false,\n  onEventFired(e) {\n    if ((e.ctrlKey || e.metaKey) && e.key === \"s\" && e.type === \"keydown\") {\n      e.preventDefault()\n      save()\n    }\n\n    if ((e.ctrlKey || e.metaKey) && e.key === \"e\" && e.type === \"keydown\") {\n      isDrawerOpen.value = !isDrawerOpen.value\n    }\n  },\n})\n\nconst { pending } = await useAsyncData(\n  `post-${postId.value}`,\n  async () => {\n    if (!postId.value) throw Error(\"no id found\")\n    const { data } = await client.from<Posts>(\"posts\").select(\"*\").eq(\"id\", postId.value).single()\n    title.value = data.title\n    body.value = data.body\n    settings.value = {\n      image: data.cover_img ?? \"\",\n      active: data.active ?? false,\n      tags: data.tags ?? [],\n    }\n\n    return data\n  },\n  { server: false, lazy: true }\n)\n\nconst isDrawerOpen = ref(false)\n\nuseCustomHead(\"Write your post\")\ndefinePageMeta({\n  alias: \"/write\",\n  middleware: \"auth\",\n})\n</script>\n\n<template>\n  <div>\n    <Loader v-if=\"pending\"></Loader>\n    <div v-else ref=\"el\" class=\"flex flex-col mt-8\">\n      <div class=\"flex justify-end prose mx-auto w-full\">\n        <button :disabled=\"isSaving\" class=\"btn-plain mr-6\" @click=\"isDrawerOpen = true\">\n          Settings <span class=\"ml-2\">⌘E</span>\n        </button>\n        <Button :loading=\"isSaving\" class=\"btn-primary\" @click=\"save\">Save <span class=\"ml-2\">⌘S</span></Button>\n      </div>\n\n      <div class=\"md:p-2 prose mx-auto w-full\" spellcheck=\"false\">\n        <TiptapHeading v-model=\"title\"></TiptapHeading>\n        <Tiptap editable v-model=\"body\"></Tiptap>\n      </div>\n\n      <DrawerEditPost v-model:show=\"isDrawerOpen\" :settings=\"settings\"></DrawerEditPost>\n      <div id=\"modal\"></div>\n      <ModalLogin v-model:show=\"isLoginVisible\"></ModalLogin>\n    </div>\n  </div>\n</template>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAA,OAAA;AACA,UAAA,SAAA;AAEA,UAAA,EAAA,WAAA;AACA,UAAA,SAAA,IAAA,OAAA,EAAA;AAEA,UAAA,QAAA,OAAA,QAAA,IAAA,EAAA,IAAA,gBAAA,kBAAA,EAAA;AACA,UAAA,OAAA,OAAA,QAAA,IAAA,EAAA,IAAA,gBAAA,iBAAA,EAAA;AACA,UAAA,WAAA,IAAA;AAAA,MAAqB,OAAA;AAAA,MACZ,QAAA;AAAA,MACC,MAAA,CAAA;AAAA,IACD,CAAA;AAGT,UAAA,WAAA,IAAA,KAAA;AACA,UAAA,iBAAA,IAAA,KAAA;AAEA,UAAA,OAAA,YAAA;;AACE,UAAA,CAAA,MAAA,SAAA,CAAA,UAAA,KAAA,KAAA,EAAA,UAAA,SAAA;AAAqE;AACrE,UAAA,GAAA,UAAA,UAAA,mBAAA,KAAA;AAEE,uBAAA,QAAA;AACA;AAAA,MAAA;AAGF,eAAA,QAAA;AACA,YAAA,EAAA,MAAA,UAAA,MAAA,OAAA,KAAA,OAAA,EAAA,OAAA;AAAA,QAEU,KAAA,YAAA,UAAA,mBAAA;AAAA,QACqB,MAAA,QAAA,MAAA,OAAA,EAAA,OAAA,MAAA;AAAA,QACe,OAAA,MAAA;AAAA,QAC7B,MAAA,KAAA;AAAA,QACF,WAAA,KAAA,MAAA;AAAA,QACW,QAAA,SAAA,MAAA;AAAA,QACC,WAAA,SAAA,MAAA;AAAA,QACG,MAAA,SAAA,MAAA;AAAA,MACL,CAAA,EAAA,OAAA;AAGzB,cAAA,IAAA,EAAA,KAAA,CAAA;AACA,UAAA,MAAA;AACE,YAAA,CAAA,OAAA,OAAA;AACE,iBAAA,QAAA,KAAA;AAGA,uBAAA,WAAA,gBAAA;AACA,uBAAA,WAAA,eAAA;AACA,qBAAA,SAAA,OAAA,OAAA;AAAA,QAAkC;AAAA,MACpC;AAEF,eAAA,QAAA;AAAA,IAAiB;AAGnB,iBAAA;AAAA,MAAa,SAAA;AAAA,MACF,aAAA,GAAA;AAEP,aAAA,EAAA,WAAA,EAAA,YAAA,EAAA,QAAA,OAAA,EAAA,SAAA,WAAA;AACE,YAAA,eAAA;AACA;QAAK;AAGP,aAAA,EAAA,WAAA,EAAA,YAAA,EAAA,QAAA,OAAA,EAAA,SAAA,WAAA;AACE,uBAAA,QAAA,CAAA,aAAA;AAAA,QAAmC;AAAA,MACrC;AAAA,IACF,CAAA;AAGF,UAAA,EAAA,QAAA,KAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,YAAA;AAAA,MAA0B,QAAA,OAAA;AAAA,MACT,YAAA;;AAEb,YAAA,CAAA,OAAA;AAAmB,gBAAA,MAAA,aAAA;AACnB,cAAA,EAAA,KAAA,IAAA,MAAA,OAAA,KAAA,OAAA,EAAA,OAAA,GAAA,EAAA,GAAA,MAAA,OAAA,KAAA,EAAA;AACA,cAAA,QAAA,KAAA;AACA,aAAA,QAAA,KAAA;AACA,iBAAA,QAAA;AAAA,UAAiB,QAAA,UAAA,cAAA,YAAA;AAAA,UACU,SAAA,UAAA,WAAA,YAAA;AAAA,UACF,OAAA,UAAA,SAAA,YAAA,CAAA;AAAA,QACH;AAGtB,eAAA;AAAA,MAAO;AAAA,MACT,EAAA,QAAA,OAAA,MAAA,KAAA;AAAA,IAC4B,CAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;AAG9B,UAAA,eAAA,IAAA,KAAA;AAEA,kBAAA,iBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}